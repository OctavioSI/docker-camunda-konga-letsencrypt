version: '3.7'

volumes:
  kong_data: {}

networks:
  letsencrypt:
    external: true
  kong-net:
    external: true

services:
  kong-migrations:
    image: "kong:2.3.2-alpine"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    image: "kong:2.3.2-alpine"
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    container_name: kong
    image: "kong:2.3.2-alpine"
    user: "kong"
    depends_on:
      - db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD: kong
      PORT: 8000
      VIRTUAL_PORT: 8000
      VIRTUAL_HOST: api.yourdomain.com
      LETSENCRYPT_HOST: api.yourdomain.com
      LETSENCRYPT_EMAIL: admin+kong@yourdomain.com
    networks:
      - kong-net
      - letsencrypt
    ports:
      - "8000:8000/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "8443:8443/tcp"
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    
  db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net

  konga-prepare:
    container_name: konga-prepare
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:kong@db:5432/konga_db"
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - db

  konga:
    container_name: konga
    image: pantsel/konga:latest
    restart: always
    networks:
      - kong-net
      - letsencrypt
    environment:
      DB_ADAPTER: postgres
      DB_HOST: db
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: ahfdjgjgf79JKLFHJKh978953kgdfjkl
      DB_DATABASE: konga_db
      NODE_ENV: production
      PORT: 1337
      VIRTUAL_PORT: 1337
      VIRTUAL_HOST: konga.yourdomain.com
      LETSENCRYPT_HOST: konga.yourdomain.com
      LETSENCRYPT_EMAIL: admin+konga@yourdomain.com
    depends_on:
      - db
    ports:
      - "1337:1337"

  camunda-postgres:
    container_name: camunda
    image: camunda/camunda-bpm-platform:${DISTRO:-latest}
    restart: always    
    networks:
      - letsencrypt    
    environment:
        DB_DRIVER: org.postgresql.Driver
        DB_URL: jdbc:postgresql://postgres:5432/camunda
        DB_USERNAME: camunda
        DB_PASSWORD: camunda
        DEBUG: "true"        
        PORT: 8080
        VIRTUAL_PORT: 8080
        VIRTUAL_HOST: camunda.yourdomain.com
        LETSENCRYPT_HOST: camunda.yourdomain.com
        LETSENCRYPT_EMAIL: admin+camunda@yourdomain.com
    depends_on:
        - postgres
    ports:
        - "7070:8080"
        - "7000:8000"            

  postgres:
    image: postgres:9.6
    environment:
        - POSTGRES_USER=camunda
        - POSTGRES_PASSWORD=camunda
    ports:
        - "5433:5432"
    networks:
      - letsencrypt